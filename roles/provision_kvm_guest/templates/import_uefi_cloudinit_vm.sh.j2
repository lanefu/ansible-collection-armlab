#!/bin/bash

IMAGE_FORMAT={{ provision_kvm_guest_image_format }}
IMAGE_DIR={{ provision_kvm_guest_image_folder }}
MACHINE_DIR={{ provision_kvm_guest_machine_folder }}
ARCH={{ ansible_architecture }}

VM_NAME={{ provision_kvm_guest_hostname }}
VM_IMAGE={{ provision_kvm_guest_image_file }}
MAC_ADDRESS={{ provision_kvm_guest_mac_address }}
FINAL_VM_PATH="${MACHINE_DIR}/${VM_IMAGE}"

VM_MEM={{ provision_kvm_guest_memory }}
VM_CPU={{ provision_kvm_guest_smp }}
META_DATA_PATH="${MACHINE_DIR}/${VM_NAME}-meta-data"
USER_DATA_PATH="${MACHINE_DIR}/${VM_NAME}-user-data"

NOCLOUD_URL={{ provision_kvm_guest_nocloud_url }}
INSTANCE_ID={{ provision_kvm_guest_instance_id }}

# handled by ansible
#cp -v "${IMAGE_DIR}/${VM_IMAGE}" "${FINAL_VM_PATH}"

# this method if not using url data source
# --cloud-init meta-data=${META_DATA_PATH},user-data=${USER_DATA_PATH} \
# also if using above... the first reboot will be a shutdown because libvirt
# wants to detach the ISO on the 2nd boot.
# would be beest to generate iso seperately and attach rather than use the built-in
# --cloud-init hooks

virt-install \
  --machine=virt \
  --arch=${ARCH} \
  --boot uefi,firmware.feature0.name=secure-boot,firmware.feature0.enabled=no \
  --name=${VM_NAME} \
  --virt-type=kvm \
  --boot hd \
  --network=default,model=virtio,mac=${MAC_ADDRESS} \
  --disk path=${FINAL_VM_PATH},format=${IMAGE_FORMAT},device=disk,bus=virtio,cache=none \
  --memory=${VM_MEM} \
  --vcpu=${VM_CPU} \
  --os-variant debiantesting \
  --import \
  --autoconsole none \
  --autostart \
  --sysinfo system.serial="ds=nocloud-net;h=${VM_NAME};i=${INSTANCE_ID};s=${NOCLOUD_URL}" \
  --check all=off
